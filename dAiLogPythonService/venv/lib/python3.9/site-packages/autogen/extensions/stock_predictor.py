# filename: stock_predictor.py
import pandas as pd
import pandas_datareader.data as web
from sklearn.model_selection import train_test_split
from sklearn.ensemble import RandomForestClassifier
from sklearn.metrics import accuracy_score
import datetime

# Specify the stock symbol
stock_symbol = "AAPL"  # Example with Apple Inc.
start_date = "2020-01-01"
end_date = "2022-12-31"

# Fetch historical stock data
df = web.DataReader(stock_symbol, "yahoo", start_date, end_date)

# Feature engineering: Create a new column 'Next Day Price' which is the shifted 'Adj Close'
df['Next Day Price'] = df['Adj Close'].shift(-1)
df['Price Change'] = df['Next Day Price'] - df['Adj Close']

# Create a target column 'Buy' where '1' indicates a buy signal and '0' indicates no buy signal
df['Buy'] = [1 if price_change > 0 else 0 for price_change in df['Price Change']]

# Drop the last row as it will have a NaN value in the 'Next Day Price'
df = df[:-1]

# Define features (X) and target (y)
features = ['Open', 'High', 'Low', 'Close', 'Volume']
X = df[features]
y = df['Buy']

# Split the data into training and testing sets
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

# Initialize the model and train it
model = RandomForestClassifier(n_estimators=100, random_state=42)
model.fit(X_train, y_train)

# Make predictions
y_pred = model.predict(X_test)

# Evaluate the model
accuracy = accuracy_score(y_test, y_pred)
print(f"Accuracy: {accuracy * 100:.2f}%")

# Predict the buy signal for the next trading day
latest_features = df[features].iloc[-1].values.reshape(1, -1)  # Reshape for single prediction
next_day_buy_signal = model.predict(latest_features)[0]

print(f"Predicted Buy Signal for next trading day: {'Buy' if next_day_buy_signal == 1 else 'Do not Buy'}")