# filename: animate_tesseract.py

import matplotlib.pyplot as plt
from matplotlib.animation import FuncAnimation
from mpl_toolkits.mplot3d import Axes3D
import numpy as np

# Define the vertices of a 4D hypercube (tesseract)
vertices = np.array([[np.sign(x) for x in (a, b, c, d)]
                  for a in (-1, 1)
                  for b in (-1, 1)
                  for c in (-1, 1)
                  for d in (-1, 1)])

edges = [
    (start, end) for start in range(16) for end in range(16)
    if sum(a != b for a, b in zip(vertices[start], vertices[end])) == 1
]

# Function to plot the tesseract edges in 3D
def plot_tesseract(ax, vertices):
    for edge in edges:
        line_data = np.array([vertices[edge[0]], vertices[edge[1]]]).T
        ax.plot3D(*line_data, color='blue')

# Function to update the plot each frame in the animation
def update(frame):
    ax.cla()
    ax.set_xlim(-1.5, 1.5)
    ax.set_ylim(-1.5, 1.5)
    ax.set_zlim(-1.5, 1.5)

    # Create a rotation matrix to rotate the tesseract in 4D
    theta = np.radians(frame)
    c, s = np.cos(theta), np.sin(theta)
    rotation_matrix = np.array([[c, -s, 0, 0], [s, c, 0, 0], [0, 0, c, -s], [0, 0, s, c]])

    # Apply rotation to tesseract vertices
    rotated_vertices = vertices.dot(rotation_matrix)

    # Project 4D tesseract onto 3D
    projection_matrix = np.array([[1, 0, 0, 0], [0, 1, 0, 0], [0, 0, 1, 0]])
    projected_vertices = rotated_vertices.dot(projection_matrix.T)

    # Plot the projected tesseract at the current frame
    plot_tesseract(ax, projected_vertices)

# Create a figure and 3D axes
fig = plt.figure()
ax = fig.add_subplot(111, projection='3d')
ax.set_xlim(-1.5, 1.5)
ax.set_ylim(-1.5, 1.5)
ax.set_zlim(-1.5, 1.5)

# Animate the tesseract
ani = FuncAnimation(fig, update, frames=np.arange(0, 360, 2), interval=50)

plt.show()